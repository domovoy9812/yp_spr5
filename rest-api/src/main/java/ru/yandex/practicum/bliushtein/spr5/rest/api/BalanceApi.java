/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.yandex.practicum.bliushtein.spr5.rest.api;

import ru.yandex.practicum.bliushtein.spr5.rest.model.Balance;
import ru.yandex.practicum.bliushtein.spr5.rest.model.GetBalance5XXResponse;
import ru.yandex.practicum.bliushtein.spr5.rest.model.NotEnoughMoney;
import ru.yandex.practicum.bliushtein.spr5.rest.model.PayRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import jakarta.validation.Valid;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-07T20:02:59.907656600+05:00[Asia/Qyzylorda]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "balance", description = "the balance API")
public interface BalanceApi {

    /**
     * GET /balance : Получить текущий баланс
     *
     * @return Успешный ответ (status code 200)
     *         or Внутренняя ошибка сервиса (status code 5XX)
     */
    @Operation(
        operationId = "getBalance",
        summary = "Получить текущий баланс",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Balance.class))
            }),
            @ApiResponse(responseCode = "5XX", description = "Внутренняя ошибка сервиса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBalance5XXResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/balance",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Balance>> getBalance(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"balance\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"error\" : \"error\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PUT /balance : оплатить заказ
     *
     * @param payRequest Данные для выполнения платежа (required)
     * @return Платеж выполнен успешно (status code 200)
     *         or Недостаточно средств для совершения платежа (status code 400)
     *         or Внутренняя ошибка сервиса (status code 5XX)
     */
    @Operation(
        operationId = "pay",
        summary = "оплатить заказ",
        responses = {
            @ApiResponse(responseCode = "200", description = "Платеж выполнен успешно", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Balance.class))
            }),
            @ApiResponse(responseCode = "400", description = "Недостаточно средств для совершения платежа", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotEnoughMoney.class))
            }),
            @ApiResponse(responseCode = "5XX", description = "Внутренняя ошибка сервиса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBalance5XXResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/balance",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Object>> pay(
        @Parameter(name = "PayRequest", description = "Данные для выполнения платежа", required = true) @Valid @RequestBody Mono<PayRequest> payRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"balance\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"actualBalance\" : 0, \"requiredBalance\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"error\" : \"error\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(payRequest).then(Mono.empty());

    }

}
